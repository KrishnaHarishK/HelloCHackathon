#ifndef RecordComparator_h
#define RecordComparator_h

#include"FileReader.hh"
#include"FixedRecord.hh"
#include"RecordDefinition.hh"

#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <deque>

/**
 * This object is designed to compare record sets, gathered by two different 
 * FileReaders and provide a simple interface for querying the results of the
 * comparison.
 */
class RecordComparator
{
 public:
  //---------------------------------------------------------------------------
  /**
   * @param aFileReader1: a FileReader which should be brimming with records.
   * @param aFileReader2: another FileReader which should be brimming with 
   *                      records generated by a different version of the 
   *                      program.
   */
  //---------------------------------------------------------------------------
  RecordComparator(const FileReader & aFileReader1,
                   const FileReader & aFileReader2);

  //---------------------------------------------------------------------------
  /**
   * Erases any pairs of mismatching records that were newed earlier.
   */
  //---------------------------------------------------------------------------
  ~RecordComparator();

  //---------------------------------------------------------------------------
  /**
   */
  //---------------------------------------------------------------------------
  const RecordDefinition::IntVector &
  GetDifferingFieldCounts() const;

  //---------------------------------------------------------------------------
  /**
   * @param aIndex: The index of the set of mistmatched records you want to 
   *                look at.
   * @return: a RecordPair which contains const *'s to two mismatching records
   *          that had the same key.
   */
  //---------------------------------------------------------------------------
  FixedRecord::RecordPair GetDifferingRecord(std::size_t aIndex, int tableIndex=0) const;

  //---------------------------------------------------------------------------
  /**
   * @return: the number of records that had the same key, but different 
   * contents.
   */
  //---------------------------------------------------------------------------
  std::size_t GetNumberOfDifferentRecords(int tableIndex=0) const;

  //---------------------------------------------------------------------------
  /**
   * @return the number keys that matched
   */
  //---------------------------------------------------------------------------
  std::size_t GetNumberOfMatchedKeys(int tableIndex=0) const;

  //---------------------------------------------------------------------------
  /**
   * @return:  the number of keys from the second input directory that were not
   *           matched by any keys from the first input directory.
   */
  //---------------------------------------------------------------------------
  std::size_t GetNumberOfUnmatchedKeysNewVersion(int tableIndex=0) const;

  //---------------------------------------------------------------------------
  /**
   * @return:  the number of keys from the first input directory that were not
   *           matched by any keys from the second input directory.
   */
  //---------------------------------------------------------------------------
  std::size_t GetNumberOfUnmatchedKeysOldVersion(int tableIndex=0) const;

  //---------------------------------------------------------------------------
  /**
   */
  //---------------------------------------------------------------------------
  std::string GetRecordDifferences(std::size_t tIndex, int tableIndex=0) const;

  //---------------------------------------------------------------------------
  /**
   * @return:  a vector containing copies of the keys that didn't match.
   */
  //---------------------------------------------------------------------------
  const std::vector<std::string> & GetUnmatchedKeysNewVersion(int tableIndex=0) const;

  //---------------------------------------------------------------------------
  /**
   * @return:  a vector containing copies of the keys that didn't match.
   */
  //---------------------------------------------------------------------------
  const std::vector<std::string> & GetUnmatchedKeysOldVersion(int tableIndex=0) const;
  
  std::size_t     GetNumberOfDataStructs();
  
  // "Total number" accessors.  These sum up the totals of the values from all of the tables.
  std::size_t     GetTotalNumberOfMatchedKeys();
  std::size_t     GetTotalNumberOfUnmatchedKeysOldVersion();
  std::size_t     GetTotalNumberOfUnmatchedKeysNewVersion();
  std::size_t     GetTotalNumberOfDifferentRecords();
  const RecordDefinition::IntVector & GetDifferingFieldCounts();
  
 private:
    // Each table needs its own set of characteristics.  That's what this struct is for.
    struct _ComparatorData {
        /// the mistmatching records
        std::vector<FixedRecord::RecordPair *> _DifferentRecords;
        
        /// the unmatched keys from the first input directory
        std::vector<std::string> _OldRecordsUnmatchedKeys;
        
        /// the unmatched keys from the second input directory
        std::vector<std::string> _NewRecordsUnmatchedKeys;
        
        /// all the matching keys from the record sets
        std::deque<const std::string *> _MatchedKeys;
        
        int numberOfMatchedKeys;
    };
    
    std::vector<_ComparatorData> _ComparatorDataVector;
    
    // Keeps track of how many of each field is different.
    RecordDefinition::IntVector _DifferingFieldCounts;
    
    /// the filer reader for the first input directory
    const FileReader & _FileReader1;
    /// the file readoer for the second input directory
    const FileReader & _FileReader2;


  //---------------------------------------------------------------------------
  /**
   * Extracts the records maps from the file readers and hands them to other
   * find functions, thus finding all the inconsistencies between the two data
   * sets.
   */
  //---------------------------------------------------------------------------
  void FindInconsistencies();
  
  //---------------------------------------------------------------------------
  /**
   * Locates the records that have matching keys but different contents and 
   * aggregates them in _DifferentRecords.
   * @param the record map of records generated by version 1
   * @param the record map of records generated by version 2
   */
  //---------------------------------------------------------------------------
  void FindDifferingRecords(const FixedRecord::RecordMap & aOldRecords,
                            const FixedRecord::RecordMap & aNewRecords,
                            int tableIndex);
  
  //---------------------------------------------------------------------------
  /**
   * This function will dump any keys that match into _MatchedKeys.
   * @param aKeyVector: a vector for keys from aRecordMap1 that don't occur in 
   *                    aRecordMap2.
   * @param aRecordMap1: a map of records for quick access.
   * @param aRecordMap2: a map of records for quick access.
   */
  //---------------------------------------------------------------------------
  void FindInconsistentKeys(std::vector<std::string> & aKeyVector,
                            const FixedRecord::RecordMap & aRecordMap1,
                            const FixedRecord::RecordMap & aRecordMap2,
                            int   tableIndex,
                            bool  populateMatchedKeys);

};

#endif
